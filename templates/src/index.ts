import { app, BrowserWindow, ipcMain } from 'electron';
import { getDatabaseService } from './services/databaseService';
import { User, NewUser } from './services/database';
import { USER_CHANNELS } from './services/userService';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    autoHideMenuBar: true, // 隐藏菜单栏但保留窗口控制按钮
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
  createWindow();
  setupIpcHandlers();
});

// 设置IPC处理程序
const setupIpcHandlers = () => {
  const dbService = getDatabaseService();

  // 添加用户
  ipcMain.handle(USER_CHANNELS.ADD_USER, async (event, userData: Omit<NewUser, 'id' | 'createdAt'>) => {
    try {
      return await dbService.addUser(userData);
    } catch (error) {
      throw error;
    }
  });

  // 获取所有用户
  ipcMain.handle(USER_CHANNELS.GET_ALL_USERS, async () => {
    try {
      return await dbService.getAllUsers();
    } catch (error) {
      throw error;
    }
  });

  // 根据ID获取用户
  ipcMain.handle(USER_CHANNELS.GET_USER_BY_ID, async (event, id: number) => {
    try {
      return await dbService.getUserById(id);
    } catch (error) {
      throw error;
    }
  });

  // 根据邮箱获取用户
  ipcMain.handle(USER_CHANNELS.GET_USER_BY_EMAIL, async (event, email: string) => {
    try {
      return await dbService.getUserByEmail(email);
    } catch (error) {
      throw error;
    }
  });

  // 更新用户
  ipcMain.handle(USER_CHANNELS.UPDATE_USER, async (event, id: number, userData: Partial<Omit<NewUser, 'id' | 'createdAt'>>) => {
    try {
      return await dbService.updateUser(id, userData);
    } catch (error) {
      throw error;
    }
  });

  // 删除用户
  ipcMain.handle(USER_CHANNELS.DELETE_USER, async (event, id: number) => {
    try {
      return await dbService.deleteUser(id);
    } catch (error) {
      throw error;
    }
  });
};

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
